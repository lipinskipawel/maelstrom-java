plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = "com.github.lipinskipawel"
version = "0.2.0"
description = "maelstrom-java"

dependencies {
    implementation "com.fasterxml.jackson.core:jackson-databind:2.14.2"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.2"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.10.0"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.0"
    testImplementation "org.assertj:assertj-core:3.24.2"
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "maelstrom-java"
                description = "Unofficial java client for Maelstrom server"
                url = "https://github.com/lipinskipawel/maelstrom-java"
                licenses {
                    license {
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                    }
                }
                developers {
                    developer {
                        name = "Pawel Lipinski"
                    }
                }
                scm {
                    connection = "scm:git:ssh://git@github.com/lipinskipawel/maelstrom-java.git"
                    developerConnection = "scm:git:ssh://git@github.com/lipinskipawel/maelstrom-java.git"
                    url = "git@github.com:lipinskipawel/maelstrom-java"
                }
            }
        }
    }
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

tasks {
    java {
        withJavadocJar()
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    javadoc {
        options.addBooleanOption('html5', true)
    }

    test {
        useJUnitPlatform()
    }

    wrapper {
        gradleVersion = "7.4.2"
        distributionType = Wrapper.DistributionType.ALL
    }
}
